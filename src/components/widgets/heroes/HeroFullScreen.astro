---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  id,
} = Astro.props;
---

<section class="relative h-screen flex items-center justify-center not-prose overflow-hidden" {...id ? { id } : {}}>
  {/* Background Image with Overlay */}
  {
    image && (
      <div class="absolute inset-0">
        {typeof image === 'string' ? (
          <Fragment set:html={image} />
        ) : (
          <Image
            class="absolute inset-0 object-cover w-full h-full"
            widths={[400, 768, 1024, 2040]}
            sizes="100vw"
            loading="eager"
            width={2040}
            height={1080}
            {...image}
          />
        )}
        <div class="absolute inset-0 bg-gradient-to-b from-black/70 via-black/50 to-black/70" />
      </div>
    )
  }

  {/* Content */}
  <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 text-center text-white">
    <div class="animate-fade-up">
      {
        tagline && (
          <p class="text-lg md:text-xl font-bold tracking-wider uppercase mb-6 text-gray-200" set:html={tagline} />
        )
      }

      {
        title && (
          <h1
            class="text-4xl md:text-6xl lg:text-7xl font-bold leading-tight mb-6 font-heading drop-shadow-2xl"
            set:html={title}
          />
        )
      }

      {
        subtitle && (
          <p
            class="text-xl md:text-2xl lg:text-3xl mb-8 text-gray-100 max-w-4xl mx-auto font-light leading-relaxed"
            set:html={subtitle}
          />
        )
      }

      {content && <div class="mb-8 text-gray-200 max-w-3xl mx-auto" set:html={content} />}

      {
        actions && (
          <div class="flex flex-wrap justify-center gap-4">
            {Array.isArray(actions) ? (
              actions.map((action) => (
                <Button
                  {...(action || {})}
                  class="px-8 py-4 text-lg font-semibold bg-white/10 backdrop-blur-sm text-white border-2 border-white/30 hover:bg-white hover:text-black transition-all duration-300"
                />
              ))
            ) : (
              <Fragment set:html={actions} />
            )}
          </div>
        )
      }
    </div>
  </div>

  {/* Scroll Indicator */}
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 text-white animate-bounce">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
    </svg>
  </div>
</section>

<style>
  @keyframes fade-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-up {
    animation: fade-up 1s ease-out;
  }
</style>
