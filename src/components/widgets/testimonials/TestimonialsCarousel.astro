---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Button from '~/components/ui/Button.astro';
import Image from '~/components/common/Image.astro';
import type { Testimonials as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  testimonials = [],
  callToAction,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <div class="relative">
    {/* Main Carousel Container */}
    <div
      class="overflow-hidden rounded-2xl bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 dark:from-primary/10 dark:via-secondary/10 dark:to-accent/10"
    >
      <div class="testimonials-carousel flex transition-transform duration-500 ease-in-out" data-carousel>
        {
          testimonials &&
            testimonials.map(({ title, testimonial, name, job, image }) => (
              <div class="w-full flex-shrink-0 p-8 md:p-12 lg:p-16">
                <div class="max-w-4xl mx-auto text-center">
                  {/* Large Quote */}
                  <div class="mb-8">
                    <svg class="w-16 h-16 mx-auto text-primary/30" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M14.017 21v-7.391c0-5.704 3.731-9.57 8.983-10.609l.995 2.151c-2.432.917-3.995 3.638-3.995 5.849h4v10h-9.983zm-14.017 0v-7.391c0-5.704 3.748-9.57 9-10.609l.996 2.151c-2.433.917-3.996 3.638-3.996 5.849h4v10h-10z" />
                    </svg>
                  </div>

                  {/* Title */}
                  {title && <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">{title}</h3>}

                  {/* Testimonial Text */}
                  {testimonial && (
                    <blockquote class="text-xl md:text-2xl leading-relaxed text-gray-700 dark:text-gray-300 mb-8 font-light">
                      "{testimonial}"
                    </blockquote>
                  )}

                  {/* Author Section */}
                  <div class="flex flex-col items-center">
                    {image && (
                      <div class="mb-4">
                        {typeof image === 'string' ? (
                          <Fragment set:html={image} />
                        ) : (
                          <Image
                            class="w-16 h-16 rounded-full object-cover border-4 border-white dark:border-gray-600 shadow-lg"
                            width={64}
                            height={64}
                            widths={[64, 128]}
                            layout="fixed"
                            {...image}
                          />
                        )}
                      </div>
                    )}

                    <div>
                      {name && <div class="font-semibold text-lg text-gray-900 dark:text-white">{name}</div>}
                      {job && <div class="text-gray-500 dark:text-gray-400">{job}</div>}
                    </div>

                    {/* Rating */}
                    <div class="flex gap-1 mt-4">
                      {[...Array(5)].map((_, i) => (
                        <svg class="w-5 h-5 text-yellow-400 fill-current" viewBox="0 0 24 24">
                          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                        </svg>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            ))
        }
      </div>
    </div>

    {/* Navigation Arrows */}
    <button
      class="carousel-prev absolute left-4 top-1/2 -translate-y-1/2 w-12 h-12 bg-white dark:bg-gray-800 rounded-full shadow-lg flex items-center justify-center text-gray-600 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors duration-200"
      aria-label="Previous testimonial"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>

    <button
      class="carousel-next absolute right-4 top-1/2 -translate-y-1/2 w-12 h-12 bg-white dark:bg-gray-800 rounded-full shadow-lg flex items-center justify-center text-gray-600 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors duration-200"
      aria-label="Next testimonial"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </button>

    {/* Dots Indicator */}
    {
      testimonials && testimonials.length > 1 && (
        <div class="flex justify-center mt-8 space-x-2">
          {testimonials.map((_, index) => (
            <button
              class={`carousel-dot w-3 h-3 rounded-full transition-all duration-200 ${
                index === 0
                  ? 'bg-primary scale-125'
                  : 'bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500'
              }`}
              aria-label={`Go to testimonial ${index + 1}`}
              data-index={index}
            />
          ))}
        </div>
      )
    }
  </div>

  {
    callToAction && (
      <div class="flex justify-center mx-auto w-fit mt-12 md:mt-16 font-medium">
        <Button {...callToAction} />
      </div>
    )
  }
</WidgetWrapper>

<script>
  class TestimonialsCarousel {
    constructor(element) {
      this.carousel = element.querySelector('[data-carousel]');
      this.prevBtn = element.querySelector('.carousel-prev');
      this.nextBtn = element.querySelector('.carousel-next');
      this.dots = element.querySelectorAll('.carousel-dot');
      this.currentIndex = 0;
      this.totalSlides = this.dots.length;

      this.init();
    }

    init() {
      // Navigation buttons
      this.prevBtn?.addEventListener('click', () => this.goToPrev());
      this.nextBtn?.addEventListener('click', () => this.goToNext());

      // Dot navigation
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });

      // Auto-play (optional)
      this.startAutoPlay();
    }

    goToSlide(index) {
      this.currentIndex = index;
      this.updateCarousel();
      this.updateDots();
    }

    goToNext() {
      this.currentIndex = (this.currentIndex + 1) % this.totalSlides;
      this.updateCarousel();
      this.updateDots();
    }

    goToPrev() {
      this.currentIndex = (this.currentIndex - 1 + this.totalSlides) % this.totalSlides;
      this.updateCarousel();
      this.updateDots();
    }

    updateCarousel() {
      const translateX = -this.currentIndex * 100;
      this.carousel.style.transform = `translateX(${translateX}%)`;
    }

    updateDots() {
      this.dots.forEach((dot, index) => {
        if (index === this.currentIndex) {
          dot.classList.add('bg-primary', 'scale-125');
          dot.classList.remove('bg-gray-300', 'dark:bg-gray-600');
        } else {
          dot.classList.remove('bg-primary', 'scale-125');
          dot.classList.add('bg-gray-300', 'dark:bg-gray-600');
        }
      });
    }

    startAutoPlay() {
      setInterval(() => {
        this.goToNext();
      }, 8000); // Change slide every 8 seconds
    }
  }

  // Initialize carousel when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const carouselElement = document.querySelector('[data-carousel]')?.closest('.relative');
    if (carouselElement) {
      new TestimonialsCarousel(carouselElement);
    }
  });

  // Re-initialize on page navigation (for Astro transitions)
  document.addEventListener('astro:after-swap', () => {
    const carouselElement = document.querySelector('[data-carousel]')?.closest('.relative');
    if (carouselElement) {
      new TestimonialsCarousel(carouselElement);
    }
  });
</script>
