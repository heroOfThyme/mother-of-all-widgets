---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';
import Image from '~/components/common/Image.astro';
import { Icon } from 'astro-icon/components';
import type { Widget } from '~/types';

export interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  image?: string | { src: string; alt?: string };
  stats?: Array<{
    number?: string;
    label?: string;
    icon?: string;
  }>;
  callToAction?: {
    text: string;
    href: string;
    variant?: 'primary' | 'secondary' | 'tertiary' | 'link';
    icon?: string;
  };
  isReversed?: boolean;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  image = await Astro.slots.render('image'),
  stats = [],
  callToAction,
  isReversed = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
    }}
  />

  <div class={`grid lg:grid-cols-2 gap-12 items-center ${isReversed ? 'lg:grid-flow-col-dense' : ''}`}>
    {/* Content Side */}
    <div
      class={`${isReversed ? 'lg:col-start-2' : ''} intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade intersect-quarter`}
    >
      {content && <div class="prose prose-lg max-w-none dark:prose-invert mb-8" set:html={content} />}

      {/* Stats Grid */}
      {
        stats && stats.length > 0 && (
          <div class="grid grid-cols-2 gap-6 mb-8">
            {stats.map((stat) => (
              <div class="text-center lg:text-left">
                {stat.icon && <Icon name={stat.icon} class="w-8 h-8 text-primary mx-auto lg:mx-0 mb-2" />}
                <div class="text-3xl lg:text-4xl font-bold text-primary dark:text-white mb-1">{stat.number}</div>
                <div class="text-sm text-muted dark:text-slate-400 font-medium">{stat.label}</div>
              </div>
            ))}
          </div>
        )
      }

      {
        callToAction && (
          <div class="text-center lg:text-left">
            <Button
              variant={callToAction.variant || 'primary'}
              text={callToAction.text}
              href={callToAction.href}
              icon={callToAction.icon}
              class="px-8 py-3"
            />
          </div>
        )
      }
    </div>

    {/* Image Side */}
    <div
      class={`relative ${isReversed ? 'lg:col-start-1' : ''} intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade intersect-quarter`}
    >
      {
        image && (
          <div class="relative">
            {typeof image === 'string' ? (
              <Fragment set:html={image} />
            ) : (
              <Image
                class="w-full rounded-lg shadow-2xl"
                width={600}
                height={400}
                widths={[400, 600, 800]}
                sizes="(max-width: 1023px) 100vw, 600px"
                layout="responsive"
                {...image}
              />
            )}

            {/* Decorative Elements */}
            <div class="absolute -top-4 -right-4 w-24 h-24 bg-primary/10 rounded-lg -z-10" />
            <div class="absolute -bottom-4 -left-4 w-32 h-32 bg-secondary/10 rounded-lg -z-10" />
          </div>
        )
      }
    </div>
  </div>
</WidgetWrapper>
